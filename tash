[1mdiff --git a/Qt5Yuv/yuvdisplay.cpp b/Qt5Yuv/yuvdisplay.cpp[m
[1mindex 27a0d00..e340fcd 100644[m
[1m--- a/Qt5Yuv/yuvdisplay.cpp[m
[1m+++ b/Qt5Yuv/yuvdisplay.cpp[m
[36m@@ -9,11 +9,12 @@[m
 struct NoisyMaterial[m
 {[m
     ~NoisyMaterial() {[m
[31m-        delete texture;[m
[32m+[m[32m        //delete texture;[m
     }[m
 [m
     QColor color;[m
[31m-    QSGTexture *texture;[m
[32m+[m[32m    //QSGTexture *texture;[m
[32m+[m[32m    QSGTexture* texture2;[m
 };[m
 [m
 class NoisyShader : public QSGSimpleMaterialShader<NoisyMaterial>[m
[36m@@ -21,14 +22,14 @@[m [mclass NoisyShader : public QSGSimpleMaterialShader<NoisyMaterial>[m
     QSG_DECLARE_SIMPLE_SHADER(NoisyShader, NoisyMaterial)[m
 [m
 public:[m
[31m-    NoisyShader() : id_color(-1), id_texture(-1), id_textureSize(-1) {[m
[32m+[m[32m    NoisyShader() : id_color(-1), id_texture2(-1), id_textureSize(-1) {[m
         //setShaderSourceFile(QOpenGLShader::Vertex, ":/scenegraph/graph/shaders/noisy.vsh");[m
         //setShaderSourceFile(QOpenGLShader::Fragment, ":/scenegraph/graph/shaders/noisy.fsh");[m
     }[m
 [m
     const char* fragmentShader() const override {[m
         return[m
[31m-                "uniform sampler2D texture;         \n"[m
[32m+[m[32m                "uniform sampler2D textur;         \n"[m
                 "uniform lowp float qt_Opacity;     \n"[m
                 "uniform lowp vec4 color;           \n"[m
                 "varying highp vec2 vTexCoord;      \n"[m
[36m@@ -36,9 +37,7 @@[m [mpublic:[m
                 "#define PI 3.14159265358979323846  \n"[m
                 "void main()                        \n"[m
                 "{                                  \n"[m
[31m-                "    lowp float shade = texture2D(texture, vTexCoord).r * 0.05 - length(vec2(0.5, 0.4) - vShadeCoord) * 0.3; \n"[m
[31m-                "    lowp vec4 c = vec4(color.xyz + shade, color.w);                                                         \n"[m
[31m-                "    gl_FragColor = texture2D(texture, vTexCoord) * qt_Opacity;                                                                          \n"[m
[32m+[m[32m                "    gl_FragColor = texture2D(textur, vTexCoord) * qt_Opacity; \n"[m
                 "}";[m
     }[m
 [m
[36m@@ -65,26 +64,34 @@[m [mpublic:[m
         program()->setUniformValue(id_color, m->color);[m
 [m
         // Bind the texture and set program to use texture unit 0 (the default)[m
[31m-        m->texture->bind();[m
[32m+[m[32m        m->texture2->bind();[m
[32m+[m[32m        //program()->setUniformValue(id_texture, m->texture->textureId());[m
[32m+[m[32m        program()->setUniformValue(id_texture2, m->texture2->textureId());[m
 [m
         // Then set the texture size so we can adjust the texture coordinates accordingly in the[m
         // vertex shader..[m
[31m-        QSize s = m->texture->textureSize();[m
[32m+[m[32m        QSize s = m->texture2->textureSize();[m
         program()->setUniformValue(id_textureSize, QSizeF(1.0 / s.width(), 1.0 / s.height()));[m
     }[m
 [m
[31m-    void resolveUniforms() {[m
[31m-        id_texture = program()->uniformLocation("texture");[m
[32m+[m[32m    void resolveUniforms() override {[m
[32m+[m[32m        //id_texture = program()->uniformLocation("texture");[m
[32m+[m[32m        id_texture2 = program()->uniformLocation("textur");[m
         id_textureSize = program()->uniformLocation("textureSize");[m
         id_color = program()->uniformLocation("color");[m
 [m
         // We will only use texture unit 0, so set it only once.[m
[31m-        program()->setUniformValue(id_texture, 0);[m
[32m+[m[32m        //program()->setUniformValue(id_texture, 0);[m
[32m+[m[32m        //assert(id_texture != -1);[m
[32m+[m[32m        assert(id_texture2 != -1);[m
[32m+[m[32m        assert(id_textureSize != -1);[m
[32m+[m[32m        //assert(id_color != -1);[m
     }[m
 [m
 private:[m
     int id_color;[m
[31m-    int id_texture;[m
[32m+[m[32m    //int id_texture;[m
[32m+[m[32m    int id_texture2;[m
     int id_textureSize;[m
 };[m
 [m
[36m@@ -92,7 +99,10 @@[m [mNoisyNode::NoisyNode(QQuickWindow *window)[m
 {[m
     // Make some noise...[m
     QImage image(NOISE_SIZE, NOISE_SIZE, QImage::Format_RGB32);[m
[31m-    image.fill(Qt::yellow);[m
[32m+[m[32m    image.fill(Qt::red);[m
[32m+[m
[32m+[m[32m    QImage image2(NOISE_SIZE, NOISE_SIZE, QImage::Format_RGB32);[m
[32m+[m[32m    image2.fill(Qt::yellow);[m
 [m
     QSGTexture *t = window->createTextureFromImage(image);[m
     t->setFiltering(QSGTexture::Nearest);[m
[36m@@ -100,10 +110,17 @@[m [mNoisyNode::NoisyNode(QQuickWindow *window)[m
     t->setVerticalWrapMode(QSGTexture::Repeat);[m
 [m
     QSGSimpleMaterial<NoisyMaterial> *m = NoisyShader::createMaterial();[m
[31m-    m->state()->texture = t;[m
[32m+[m[32m    //m->state()->texture = t;[m
     m->state()->color = QColor::fromRgbF(0.95, 0.95, 0.97);[m
     m->setFlag(QSGMaterial::Blending);[m
 [m
[32m+[m[32m    t = window->createTextureFromImage(image2);[m
[32m+[m[32m    t->setFiltering(QSGTexture::Nearest);[m
[32m+[m[32m    t->setHorizontalWrapMode(QSGTexture::Repeat);[m
[32m+[m[32m    t->setVerticalWrapMode(QSGTexture::Repeat);[m
[32m+[m
[32m+[m[32m    m->state()->texture2 = t;[m
[32m+[m
     setMaterial(m);[m
     setFlag(OwnsMaterial, true);[m
 [m
